{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programs\\\\Web(HTML_CSS_JV)\\\\p-i-s\\\\frontend\\\\src\\\\components\\\\Cart.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { placeOrder, updateProduct } from '../api/api';\nimport { CartContext } from './CartContext';\nimport { UserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cart() {\n  _s();\n  const {\n    cart\n  } = useContext(CartContext);\n  const {\n    user\n  } = useContext(UserContext);\n  const handlePlaceOrder = async () => {\n    // Calculate total prices\n    const total_price_kc = cart.reduce((total, item) => total + parseFloat(item.price_kc) * (item.quantity || 1), 0);\n    const total_price_eu = total_price_kc * 0.04; // Assuming 1 Kč = 0.04 €\n\n    const orderData = {\n      user_id: user.id,\n      order_date: new Date().toISOString(),\n      status: 'processing',\n      total_price_kc,\n      total_price_eu,\n      items: cart.map(item => ({\n        productId: item.id,\n        quantity: item.quantity || 1,\n        price_kc: item.price_kc\n      }))\n    };\n    console.log('Order Data:', orderData); // Log order data\n\n    try {\n      const response = await placeOrder(orderData);\n      if (response) {\n        // Update product stock\n        for (const item of cart) {\n          console.log('Updating product stock for item:', item); // Log item being updated\n          const updatedStock = item.stock - (item.quantity || 1);\n          await updateProduct(item.id, {\n            ...item,\n            stock: updatedStock\n          });\n        }\n        alert('Order placed successfully!');\n      } else {\n        alert('Failed to place order!');\n      }\n    } catch (error) {\n      console.error('Error placing order:', error); // Log error\n      alert('Failed to place order!');\n    }\n  };\n  const groupedCart = cart.reduce((acc, item) => {\n    const existingItem = acc.find(cartItem => cartItem.id === item.id);\n    if (existingItem) {\n      existingItem.quantity += item.quantity || 1;\n      existingItem.totalPrice += parseFloat(item.price_kc) * (item.quantity || 1);\n    } else {\n      acc.push({\n        ...item,\n        quantity: item.quantity || 1,\n        totalPrice: parseFloat(item.price_kc) * (item.quantity || 1)\n      });\n    }\n    return acc;\n  }, []);\n\n  // Calculate total prices for the entire cart\n  const totalCartPriceKc = groupedCart.reduce((total, item) => total + item.totalPrice, 0);\n  const totalCartPriceEu = totalCartPriceKc * 0.04; // Assuming 1 Kč = 0.04 €\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: groupedCart.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" - \", item.quantity, \"x \", item.price_kc, \" K\\u010D = \", item.totalPrice.toFixed(2), \" K\\u010D (\", (item.totalPrice * 0.04).toFixed(2), \" \\u20AC)\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Total Price: \", totalCartPriceKc.toFixed(2), \" K\\u010D (\", totalCartPriceEu.toFixed(2), \" \\u20AC)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlaceOrder,\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Cart, \"REn3uUCASvDHrYuEvaq1u/zpAhc=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useContext","placeOrder","updateProduct","CartContext","UserContext","jsxDEV","_jsxDEV","Cart","_s","cart","user","handlePlaceOrder","total_price_kc","reduce","total","item","parseFloat","price_kc","quantity","total_price_eu","orderData","user_id","id","order_date","Date","toISOString","status","items","map","productId","console","log","response","updatedStock","stock","alert","error","groupedCart","acc","existingItem","find","cartItem","totalPrice","push","totalCartPriceKc","totalCartPriceEu","children","fileName","_jsxFileName","lineNumber","columnNumber","index","name","toFixed","onClick","_c","$RefreshReg$"],"sources":["D:/Programs/Web(HTML_CSS_JV)/p-i-s/frontend/src/components/Cart.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { placeOrder, updateProduct } from '../api/api';\nimport { CartContext } from './CartContext';\nimport { UserContext } from './UserContext';\n\nfunction Cart() {\n    const { cart } = useContext(CartContext);\n    const { user } = useContext(UserContext);\n\n    const handlePlaceOrder = async () => {\n        // Calculate total prices\n        const total_price_kc = cart.reduce((total, item) => total + parseFloat(item.price_kc) * (item.quantity || 1), 0);\n        const total_price_eu = total_price_kc * 0.04; // Assuming 1 Kč = 0.04 €\n\n        const orderData = {\n            user_id: user.id,\n            order_date: new Date().toISOString(),\n            status: 'processing',\n            total_price_kc,\n            total_price_eu,\n            items: cart.map(item => ({\n                productId: item.id,\n                quantity: item.quantity || 1,\n                price_kc: item.price_kc\n            }))\n        };\n\n        console.log('Order Data:', orderData); // Log order data\n\n        try {\n            const response = await placeOrder(orderData);\n            if (response) {\n                // Update product stock\n                for (const item of cart) {\n                    console.log('Updating product stock for item:', item); // Log item being updated\n                    const updatedStock = item.stock - (item.quantity || 1);\n                    await updateProduct(item.id, { ...item, stock: updatedStock });\n                }\n                alert('Order placed successfully!');\n            } else {\n                alert('Failed to place order!');\n            }\n        } catch (error) {\n            console.error('Error placing order:', error); // Log error\n            alert('Failed to place order!');\n        }\n    };\n\n    const groupedCart = cart.reduce((acc, item) => {\n        const existingItem = acc.find(cartItem => cartItem.id === item.id);\n        if (existingItem) {\n            existingItem.quantity += item.quantity || 1;\n            existingItem.totalPrice += parseFloat(item.price_kc) * (item.quantity || 1);\n        } else {\n            acc.push({\n                ...item,\n                quantity: item.quantity || 1,\n                totalPrice: parseFloat(item.price_kc) * (item.quantity || 1)\n            });\n        }\n        return acc;\n    }, []);\n\n    // Calculate total prices for the entire cart\n    const totalCartPriceKc = groupedCart.reduce((total, item) => total + item.totalPrice, 0);\n    const totalCartPriceEu = totalCartPriceKc * 0.04; // Assuming 1 Kč = 0.04 €\n\n    return (\n        <div>\n            <h2>Cart</h2>\n            <ul>\n                {groupedCart.map((item, index) => (\n                    <li key={index}>\n                        {item.name} - {item.quantity}x {item.price_kc} Kč = {item.totalPrice.toFixed(2)} Kč ({(item.totalPrice * 0.04).toFixed(2)} €)\n                    </li>\n                ))}\n            </ul>\n            <h3>Total Price: {totalCartPriceKc.toFixed(2)} Kč ({totalCartPriceEu.toFixed(2)} €)</h3>\n            <button onClick={handlePlaceOrder}>Place Order</button>\n        </div>\n    );\n}\n\nexport default Cart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}